" When started as "evim", evim.vim will already have done these settings.
if v:progname =~? "evim"
  finish
endif

" Use Vim settings, rather then Vi settings (much better!).
" This must be first, because it changes other options as a side effect.
set nocompatible

" allow backspacing over everything in insert mode
set backspace=indent,eol,start

if has("vms")
  set nobackup		" do not keep a backup file, use versions instead
else
  set backup		" keep a backup file
endif
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set showcmd		" display incomplete commands
set incsearch		" do incremental searching

" For Win32 GUI: remove 't' flag from 'guioptions': no tearoff menu entries
" let &guioptions = substitute(&guioptions, "t", "", "g")

" Don't use Ex mode, use Q for formatting
map Q gq

" CTRL-U in insert mode deletes a lot.  Use CTRL-G u to first break undo,
" so that you can undo CTRL-U after inserting a line break.
inoremap <C-U> <C-G>u<C-U>

" In many terminal emulators the mouse works just fine, thus enable it.
if has('mouse')
  set mouse=a
endif

" Switch syntax highlighting on, when the terminal has colors
" Also switch on highlighting the last used search pattern.
if &t_Co > 2 || has("gui_running")
  syntax on
  set hlsearch
endif

" Only do this part when compiled with support for autocommands.
if has("autocmd")

  " Enable file type detection.
  " Use the default filetype settings, so that mail gets 'tw' set to 72,
  " 'cindent' is on in C files, etc.
  " Also load indent files, to automatically do language-dependent indenting.
  filetype plugin indent on

  " Put these in an autocmd group, so that we can delete them easily.
  augroup vimrcEx
  au!

  " For all text files set 'textwidth' to 78 characters.
  autocmd FileType text setlocal textwidth=78

  " When editing a file, always jump to the last known cursor position.
  " Don't do it when the position is invalid or when inside an event handler
  " (happens when dropping a file on gvim).
  " Also don't do it when the mark is in the first line, that is the default
  " position when opening a file.
  autocmd BufReadPost *
    \ if line("'\"") > 1 && line("'\"") <= line("$") |
    \   exe "normal! g`\"" |
    \ endif

  augroup END

else

  set autoindent		" always set autoindenting on

endif " has("autocmd")

" Convenient command to see the difference between the current buffer and the
" file it was loaded from, thus the changes you made.
" Only define it when not defined already.
if !exists(":DiffOrig")
  command DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis
		  \ | wincmd p | diffthis
endif

" Spell Check
" Only do this part when compiled with support for autocommands.

if has("autocmd")
    " disable autoindent, make the background dark, change the colorscheme to
    " suit the dark background, make sure our textwidth is 72 characters and
    " disable line numbering for email
    autocmd FileType mail set noautoindent |
        \ set nosmartindent |
        \ set background=dark |
        \ colorscheme evening |
        \ set textwidth=72 |
        \ set nonumber |
        \ set spell spelllang=pt |
    	\ hi clear SpellBad |
	\ hi SpellBad cterm=underline ctermfg=red
endif " has("autocmd")

au BufRead ~/.mutt/temp/mutt-* set tw=72
set clipboard=unnamed

execute pathogen#infect()

let g:colors_name = expand('<sfile>:t:r')

highlight Normal ctermfg=Gray ctermbg=Black guifg=Gray guibg=Black
highlight TabLineSel cterm=NONE ctermfg=fg ctermbg=Blue gui=NONE guifg=fg guibg=Blue
highlight TabLine cterm=NONE ctermfg=bg ctermbg=fg gui=NONE guifg=bg guibg=fg
highlight TabLineFill cterm=NONE ctermfg=bg ctermbg=fg gui=NONE guifg=bg guibg=fg
highlight Title cterm=NONE ctermfg=Red gui=NONE guifg=Red
highlight MatchParen cterm=NONE ctermfg=Red ctermbg=bg gui=NONE guifg=Red guibg=bg
highlight FoldColumn cterm=NONE ctermfg=bg ctermbg=fg gui=NONE guifg=bg guibg=fg
highlight Folded cterm=NONE ctermfg=Cyan ctermbg=bg gui=NONE guifg=Cyan guibg=bg
highlight StatusLine cterm=NONE ctermfg=fg ctermbg=Blue gui=NONE guifg=fg guibg=Blue
highlight StatusLineNC cterm=NONE ctermfg=bg ctermbg=fg gui=NONE guifg=bg guibg=fg
highlight DiffAdd cterm=NONE ctermfg=bg ctermbg=Green gui=NONE guifg=bg guibg=Green
highlight DiffDelete cterm=NONE ctermfg=bg ctermbg=Red gui=NONE guifg=bg guibg=Red
highlight DiffChange cterm=NONE ctermfg=bg ctermbg=Yellow gui=NONE guifg=bg guibg=Yellow
highlight DiffText cterm=NONE ctermfg=bg ctermbg=Magenta gui=NONE guifg=bg guibg=Magenta
highlight Pmenu cterm=NONE ctermfg=bg ctermbg=White gui=NONE guifg=bg guibg=White
highlight PmenuSel cterm=NONE ctermfg=White ctermbg=Blue gui=NONE guifg=White guibg=Blue
highlight PmenuSbar cterm=NONE ctermfg=Yellow ctermbg=Yellow gui=NONE guifg=Yellow guibg=Yellow
highlight PmenuThumb cterm=NONE ctermfg=bg ctermbg=bg gui=NONE guifg=bg guibg=bg
highlight SpellBad cterm=underline ctermfg=DarkRed ctermbg=bg gui=undercurl guisp=Red

" Small function to swap vim panels
" Mark with \mw, move to wanted place with ctrl+w/ctrl+w and swipe with \pw
function! MarkWindowSwap()
    let g:markedWinNum = winnr()
endfunction

function! DoWindowSwap()
    "Mark destination
    let curNum = winnr()
    let curBuf = bufnr( "%" )
    exe g:markedWinNum . "wincmd w"
    "Switch to source and shuffle dest->source
    let markedBuf = bufnr( "%" )
    "Hide and open so that we aren't prompted and keep history
    exe 'hide buf' curBuf
    "Switch to dest and shuffle source->dest
    exe curNum . "wincmd w"
    "Hide and open so that we aren't prompted and keep history
    exe 'hide buf' markedBuf 
endfunction

nmap <silent> <leader>mw :call MarkWindowSwap()<CR>
nmap <silent> <leader>pw :call DoWindowSwap()<CR>

" \+ or \- to resize
nnoremap <silent> <Leader>+ :exe "resize " . (winheight(0) * 3/2)<CR>
nnoremap <silent> <Leader>- :exe "resize " . (winheight(0) * 2/3)<CR>

set smartindent
set tabstop=4
set shiftwidth=4
set expandtab
